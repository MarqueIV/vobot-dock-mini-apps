from micropython import const

_POMODORO_DONE = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00+\x00\x00\x00.\x08\x03\x00\x00\x00\x86N\x10A\x00\x00\x00\x84PLTEGpL\xf4DD\xffZZ\xfdUU\xffZZ\xfcSS\xf3BB\xf2AA\xf6RO\xfcSS\xfdUU\xfeXX\xfaPP\xffZZa\xb1Pa\xb1Pa\xb1P\xfbRR\xf9MMv\xa6Q\xaa\x89Ta\xb1Pa\xb1P\xa1\x91Ta\xb1Pa\xb1P\xf4EE\xc8xW\xef<<\xffZZa\xb1P\xf8LL\xff\xfd\xfd\xff{{\x8a\x9bR\xff\xd2\xd2\xffii\xff\x85\x85\xf1bY\xff\xba\xba\xfc^\\\xff\x9d\x9d\xe0kX\xff\xe3\xe3S\xea\x0b\x93\x00\x00\x00\x1ctRNS\x00\xdbD\x9b\xf3\xae\xec\xfd]\x0b\x1e\xe2\x82\xd4\xc7G\x1d3p\xf5\xfe1X\x1d\xe6~\xc6\x9f\xf7Ujk\x00\x00\x01wIDATx\xda\x8d\x92\xd9v\x820\x14E/S\x12\xa0P\xc1a\xa9\xcdE\x90:\xb5\xff\xff\x7fMLj\x10\xcd\xb0\x1f\xf0e\xaf\xb3\xb6\x17\xc0\xc7n\x03\x81,\xea.\xd4\xfd\xdcv\xdd:P\xed\x04\x8bp\xd5\xb8~5\xa8w}7\xeb\xb5{\xaf\xde\xc9\x0bl\xa5\xba\x03\x17\x9bZ5\xca\x9f\xadk\xb4`_\xcbN\xb0JW\xe2\xb9d\x05X\x88\x93\x12\x05\xd2\xea\xe4\xe3xE,\x93\x18^\xc8Y\x85\x9a\x1f1-U\x94H=\x9fmVh8/\'*\x1e8ma\xc2\x07>q>\xde\x034\x94\xf3\xfdc:\xcf\x10\xe7\xf2\x19\xa7.\'\xffr\x86/\xc8U\x13!\x88\x94\xda\xa2\x15\xe3\xf2\x0c\x04E*w\xc6\x93\xc7\xe5\x8dp\x13\x14\x0c\xfd\xe0ruE\x9e\xa2\xb7AQ\x00C\xc1\xf7\x80v\xa8v\x13\x950\x8eh\x87k"\xa8P\xd0_\xfc\t\x9c@*\x13\xfa[\x80\xcbA]\xe1\xe4I0\xee\xc9y\xb1p\x97N\xdcT7\xf8g9T\xfa\xbf\xf9g)d\xfaf\xfeY\xa2>\xf3\xf1\xd7z\x04\xc3\x1eb\x14\xdc\xfa\xc1V`\xf8\x80\\\xbd\x8c\x8b\xad\xc0\x90\x83\n\xbe\xf4\x83\xad\xc0\xe4\x82\x8a\xb8\x8e\x83\xad\xc0$\x08*\x94\xf8T\n\x92\xd8\xa7\x9aYY\xecW\t(\x8a\xd2r\x01\x03m@\xd3\xa4\x1e\x953x\x10\xa7N\x93\xb70\xa1)\x1d&e\xf0D\x9e\xdc\xbd\x03\xe5/D\x05\xcca\x84\xbf\x83\xb4\xf0\x0e\x16\xcdWi\xc4\xc0\n\xcb"B\x95F\xa2l&\xfe\x01tI\x95\xa8Jp|\x83\x00\x00\x00\x00IEND\xaeB`\x82'
_POMODORO = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00,\x00\x00\x00/\x08\x03\x00\x00\x00\xaf\xce\xd8\x9d\x00\x00\x00<PLTEGpL\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\xc9\xb0\xf5\x00\x00\x00\x14tRNS\x00\x05\x11\x1f*;GThv\x85\x93\xa2\xb2\xc6\xd6\xe2\xf0\xf8\xfei\xf6S\xff\x00\x00\x01{IDATx\xda\x95\x94\x8bn\xac0\x0cD\x9d\x84<I\xec8\xf3\xff\xffz\xc5\xaa\xbde\x11\xa5\xde\x11B(:\x19{l\t\xfaKiV2\xcau\xa0\x18\xd9 3\xaedc\xb7\xc9>`\xb3\xb1:\x1c\x05\x04\x9b\xefpDn\xe5g\xcc\x1d/\xffb7~\x0e\xb8\xed\xab\x109\x16O\xaeblOh\x07w\xf5\xd4g ?\xf4\xa1\x07\x9f\x06$\x91[\x00"%\x95_mCe,Q\xb0\xa3\x0et*X\x00\xd7p\x83\xc6\x01i\xd1\x11\xed\xd0\xcdcR\x858\x9f\x9a`\xc4\xab\xeb\xf89\x8bk\xc5\xe0+\xf8\xbf\xcbxs\xcf\xca\xf1tS\x912\xe4\xa7(\x9fsV4G\'9\xc5\x9a\xe7\x93\x86J_*\xc8\xd7\xa9\xe8e\xc9\x19\xe5\xbb\xc7BW\xf9\xeb\xcc\n\xe2\xab\xa6t2\xa8\x8b;\xee\xa8\xb7\xc0^\x8f\xfa\xb3\x91Im\x12E\x04\x1b\x1c\x10\xa91\x19\xc5\xedx\x8cjL\xb3X\xe12\t\xc9\n\'\x10\xa2\x15\x8e\x1f\xc2\xcb\xde\xc6\xfa(\xe0g\xa3\xeb\xc3\n\xf7~\x98\x1b5\x0bm\xd8l\xec\x0b\xb4\xfe\xac\xeb<\xfa\x16\x1b,\x8d\x88\x02\x92m\xd9\xe1\x95\x92-0w:\x14V1ld\x85\xaf\xd65\xfc\xc5\x06\xfd\x1e\x83\x1b\xe2\x9fY/\xe3\xf4\xcd\xfe\x91\xe5\xb3\x9b\x17\xd9\x1e\xd6!\xef\x95\xfdX\xc5\xdd\xa3\xae\xac\xe1\xafqU\xb2\xbbA\xb3h\xb9il_\xb3E\xf7F\xc66\xd7\xee\xefsT\x86\xf2^r\x8a1\xe5\xb2\xb3\x82\xab\x7f\xc8\x9d\xdb\x10]\xc0R\x19-_\xc8\x7f\x85\xe4\x10_\xf8T\x84\xdd\x00\x00\x00\x00IEND\xaeB`\x82'
_PAUSE_ICON = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00A\x00\x00\x00A\x08\x03\x00\x00\x00\xb9)9w\x00\x00\x00\x01sRGB\x00\xae\xce\x1c\xe9\x00\x00\x009PLTEGpL\x08\x08\x08\x17\x17\x17000AAA[[[mmm~~~\x88\x88\x88\x99\x99\x99\xad\xad\xad\xb8\xb8\xb8\xc5\xc5\xc5\xd4\xd4\xd4\xdb\xdb\xdb\xeb\xeb\xeb\xf2\xf2\xf2\xf9\xf9\xf9\xff\xff\xff\xa2)\n\xf8\x00\x00\x00\x12tRNS\x00\x07\x15/A[m~\x88\x99\xad\xb8\xc5\xd4\xdb\xeb\xf2\xf9\xe7\xe1\x05s\x00\x00\x02\x03IDATx\xda\xb5X\xdb\x92\x83 \x0c\x05\x12\xc0"\x08\xf8\xff\x1f\xbb\xb3\x89\x0e\xab\x15[\xc9\xecy*4\x1cr\x03\x12U\x07\x1a\xd0\xbd\xe2\x92\xebZ\xf3\x12_\x0eA\xab\x07\xd0\xc6\x85T\xd6\xbf()8\xf3-\x89\xb1\xa1\xacW(\xc1\x9ao\xf6\xb7sY{(\xf3g\x0e\x9c\xd7{\xccxo\xc0\x94w\xc9\x9aS\xf0\x16\x11\x10\xad\x0f)\xd7uC\x9en\xd4\x80Xw\xb1\xe0P\xab\x06\x8d.\xe4\x9d;B\xd7\x03\xcb&\x92&0\x17\xf1\x9d\xd2\xb6\xc1b\xf5%\x81+\xbb\x9a\xd0\xd3q7\xb28}A\xe0\xcb\x16\xb2\x9b\xdc\xd1\x106)\xaf{\x1a\xe4\x13\xfb\xbb\\\xeeha\x99 \xa1\xfa\x04LLaO\x16\xb2\x13#\xa8\xcf\x80\xc8\xee<\xc8\x9a\xc8\x04\xfdH\x7f\x92\x9e*\x99\x00\xea;\x00\x19R\xa76\x83\x99\x9c\x88\xea\x1e\xfd\x05f\xe6\x00\x1dU5F\x9f\x07\r\x1c\xfay\xb7\xc3\x92Y\xe1 \x83\xb1.\xfe<h\xd0\x81\xd6\xd8\xbf*\xe4w\xd7\x16<\x0f\x1a \xb3\x12-\x15\xeatT\x81\\;\x9d\x07\r\x9a\x9c_,+\xf4\x1e]\x85\xa4\xe4\xeb<8g\x10\x9bn\n\xef\xf0\x90AM\xe4\xfe_3\x1c\xfd\x82\xc7\x0c@;\xbb\xdd\x88\xd9<f03\x9b\xc1\xf9U\x9dz\xcc\xa0\\\xe5<\xc6B\xd95\xc0\x80\x99\x82\xccnHz\x80A\'v\xc4\x8b\xacQ\x03\x0c*\xf04\x9dT?\xc4\xe0\xe9\x8c+J\x0c;\xc4`)\x15\x15\xe57\x8e0\xf0|VU\xc8P\x15\xfd\x0bC\x0c@\xf3r\x1d\xe4~\x90\xc7B\x9e\x0f\xf2\x9c\x94\x9f\x0b\xf9\xd9\x94\xdf\x0f\xdb\x1d\x15\x06\xee(^\xa8\x15;"\x0f\xdc\x93\x99\xdc \xbf\xab\xe5\xefE{\xb3\xfc\xc37\xcb\xd7V\xc8\x988\xfcnF#~\xbb\x8f\xf5\x83{P?\xb8r|\xa707;\xbe\x02\xf0\x02\x14\xd7Q\xf2ZN\\O^\xd7\xb40P\xd3\n\xeajqm\xdf\xef/|\xcf\x14\xf0\xad\xbf\x18\xe8q\xcc]\x8f#\xef\xb3\xe4\xbd^\x83\x16\xf5\x9b\x0cs\xdb\xf3Fk\xa4}\xf7\x7f\xf4\xfe\xf2\xef\x0f?\xb8\xb0Z\x84\x8f\x9c\x1d[\x00\x00\x00\x00IEND\xaeB`\x82'

class pomodoroTimer:
    _instance = None
    _configured = False

    SHORT_LIMIT = const(3) # Total number of short breaks

    STATE_PAUSED = const(0) # App state: countdown stopped
    STATE_RUNNING = const(1) # App state: countdown running

    MODE_FOCUS = const(0) # Focus/work mode
    MODE_SHORT_BREAK = const(1) # Short break mode
    MODE_LONG_BREAK = const(2) # Long break mode

    DEFAULT_FOCUS_DURATION = const(25) # Default duration for focus mode in minutes
    DEFAULT_SHORT_BREAK_DURATION = const(5) # Default duration for short break in minutes
    DEFAULT_LONG_BREAK_DURATION = const(30) # Default duration for long break in minutes

    def __new__(cls, *args, **kw):
        # Singleton pattern implementation
        if cls._instance is None:
            cls._instance = object.__new__(cls)
        return cls._instance

    def __init__(self, app_mgr):
        # Initialize the timer only once
        if not self._configured:
            self.mode_config = {}
            self.app_mgr = app_mgr

            self.work_sessions = 0  # Number of completed work sessions
            self.recorded_time = 0  # Last recorded timestamp
            self.remaining_time = 0  # Remaining time in seconds
            self.state = self.STATE_PAUSED  # Initial state is paused
            self.curr_mode = self.MODE_FOCUS  # Initial mode is focus

            self._configured = True

    @property
    def has_pending(self):
        # Check if there's pending session info
        if self.work_sessions > 0: return True
        elif self.curr_mode != self.MODE_FOCUS: return True
        elif self.remaining_time != self.mode_config[self.curr_mode]["duration"]: return True

        return False

    @property
    def is_paused(self):
        # Check if timer is currently paused
        return self.state == self.STATE_PAUSED

    def load_config(self):
        # Load application configuration from app manager
        pomodoro_cfg = self.app_mgr.config()
        focus = pomodoro_cfg.get("focus", None)
        short_break = pomodoro_cfg.get("break", None)
        long_break = pomodoro_cfg.get("long_break", None)

        if not focus or not short_break or not long_break:
            # If any config is missing, use default values
            focus = self.DEFAULT_FOCUS_DURATION
            short_break = self.DEFAULT_SHORT_BREAK_DURATION
            long_break = self.DEFAULT_LONG_BREAK_DURATION

            pomodoro_cfg["focus"] = focus
            pomodoro_cfg["break"] = short_break
            pomodoro_cfg["long_break"] = long_break
            self.app_mgr.config(pomodoro_cfg)

        tmp_mode_config = {
            self.MODE_FOCUS: {"label": "FOCUS", "duration": int(focus) * 60},
            self.MODE_SHORT_BREAK: {"label": "BREAK", "duration": int(short_break) * 60},
            self.MODE_LONG_BREAK: {"label": "BREAK", "duration": int(long_break) * 60},
        }

        # Reset if configuration has changed
        need_reset = tmp_mode_config != self.mode_config
        self.mode_config = tmp_mode_config
        if need_reset: self.reset()

    def reset(self):
        # Reset all timer values
        self.recorded_time = 0
        self.work_sessions = 0
        self.state = self.STATE_PAUSED
        self.curr_mode = self.MODE_FOCUS
        self.remaining_time = self.mode_config[self.curr_mode]["duration"]

    def handle_mode_change(self):
        # Switch between modes based on current state
        if self.curr_mode == self.MODE_FOCUS:
            self.work_sessions += 1
            if self.work_sessions <= self.SHORT_LIMIT:
                self.curr_mode = self.MODE_SHORT_BREAK
            else:
                self.curr_mode = self.MODE_LONG_BREAK
        else:
            if self.curr_mode == self.MODE_LONG_BREAK:
                self.work_sessions = 0
            self.curr_mode = self.MODE_FOCUS

        self.remaining_time = self.mode_config[self.curr_mode]["duration"]
        self.toggle_state(self.STATE_PAUSED)

        return self.curr_mode

    def toggle_state(self, state):
        # Toggle timer state between paused and running
        if state not in (self.STATE_PAUSED, self.STATE_RUNNING): return False
        self.state = state
